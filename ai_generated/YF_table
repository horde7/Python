import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta
import numpy as np

def get_stock_metrics(tickers, periods=4):
    """
    Fetch quarterly P/E ratios and analyst recommendations for given stocks
    
    Parameters:
    tickers (list): List of stock tickers
    periods (int): Number of quarters to look back
    
    Returns:
    tuple: Two DataFrames containing P/E ratios and recommendations
    """
    
    # Calculate date ranges for quarters
    end_date = datetime.now()
    dates = []
    for i in range(periods):
        quarter_end = end_date - timedelta(days=90*i)
        quarter = (quarter_end.month-1)//3 + 1
        dates.append(f"{quarter_end.year}-Q{quarter}")
    dates.reverse()
    
    # Initialize DataFrames
    pe_data = pd.DataFrame(index=tickers, columns=dates)
    rec_data = pd.DataFrame(index=tickers, columns=dates)
    
    # Fetch data for each ticker
    for ticker in tickers:
        stock = yf.Ticker(ticker)
        
        # Get quarterly financials
        quarterly_info = stock.quarterly_financials
        
        # Get P/E ratios
        try:
            pe_history = stock.info.get('forwardPE', np.nan)
            for date in dates:
                pe_data.loc[ticker, date] = pe_history
        except:
            pe_data.loc[ticker, :] = np.nan
            
        # Get analyst recommendations
        try:
            recommendations = stock.recommendations
            if recommendations is not None:
                for date in dates:
                    year, quarter = date.split('-Q')
                    quarter_start = pd.Timestamp(f"{year}-{(int(quarter)-1)*3 + 1}-01")
                    quarter_end = quarter_start + pd.offsets.QuarterEnd()
                    
                    quarter_recs = recommendations.loc[
                        (recommendations.index >= quarter_start) &
                        (recommendations.index <= quarter_end)
                    ]
                    
                    if not quarter_recs.empty:
                        rec_counts = quarter_recs['To Grade'].value_counts()
                        most_common = rec_counts.index[0] if not rec_counts.empty else 'No Data'
                        rec_data.loc[ticker, date] = most_common
                    else:
                        rec_data.loc[ticker, date] = 'No Data'
        except:
            rec_data.loc[ticker, :] = 'No Data'
    
    return pe_data, rec_data

# List of tickers
tickers = ['BAS.DE', 'NG.L', 'VICI']

# Get the data
pe_ratios, recommendations = get_stock_metrics(tickers)

# Format and display P/E ratios
print("\nForward P/E Ratios:")
print(pe_ratios.round(2))

print("\nAnalyst Recommendations:")
print(recommendations)

# Optionally save to Excel
with pd.ExcelWriter('stock_analysis.xlsx') as writer:
    pe_ratios.to_excel(writer, sheet_name='PE_Ratios')
    recommendations.to_excel(writer, sheet_name='Recommendations')